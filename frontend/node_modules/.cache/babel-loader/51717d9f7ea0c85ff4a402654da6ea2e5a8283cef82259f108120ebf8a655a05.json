{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { useQuery, useMutation, useQueryClient } from 'react-query';\nimport { messagesAPI } from '../services/api';\nimport toast from 'react-hot-toast';\nexport const useMessaging = () => {\n  _s();\n  var _conversationsData$da, _messagesData$data2, _unreadData$data;\n  const [selectedConversationId, setSelectedConversationId] = useState(null);\n  const [selectedUserId, setSelectedUserId] = useState(null);\n  const queryClient = useQueryClient();\n\n  // Fetch conversations\n  const {\n    data: conversationsData,\n    isLoading: conversationsLoading,\n    error: conversationsError\n  } = useQuery('conversations', () => messagesAPI.getMessages(), {\n    staleTime: 30 * 1000,\n    // 30 seconds\n    refetchInterval: 60 * 1000 // Refetch every minute\n  });\n\n  // Fetch messages for selected conversation\n  const {\n    data: messagesData,\n    isLoading: messagesLoading,\n    error: messagesError\n  } = useQuery(['messages', selectedUserId], () => messagesAPI.getConversation(selectedUserId), {\n    enabled: !!selectedUserId,\n    staleTime: 10 * 1000 // 10 seconds\n  });\n\n  // Fetch unread count\n  const {\n    data: unreadData\n  } = useQuery('unreadCount', () => messagesAPI.getUnreadCount(), {\n    staleTime: 30 * 1000,\n    refetchInterval: 30 * 1000\n  });\n\n  // Send message mutation\n  const sendMessageMutation = useMutation(messageData => messagesAPI.sendMessage(messageData), {\n    onSuccess: () => {\n      // Invalidate and refetch conversations and messages\n      queryClient.invalidateQueries('conversations');\n      queryClient.invalidateQueries(['messages', selectedUserId]);\n      queryClient.invalidateQueries('unreadCount');\n    },\n    onError: error => {\n      toast.error('Failed to send message');\n      console.error('Send message error:', error);\n    }\n  });\n\n  // Mark message as read mutation\n  const markAsReadMutation = useMutation(messageId => messagesAPI.markAsRead(messageId), {\n    onSuccess: () => {\n      queryClient.invalidateQueries('conversations');\n      queryClient.invalidateQueries('unreadCount');\n    }\n  });\n\n  // Handle sending a message\n  const sendMessage = useCallback(content => {\n    if (!selectedUserId || !content.trim()) return;\n    sendMessageMutation.mutate({\n      recipient: selectedUserId,\n      content: content.trim()\n    });\n  }, [selectedUserId, sendMessageMutation]);\n\n  // Handle conversation selection\n  const selectConversation = useCallback(conversation => {\n    setSelectedConversationId(conversation.conversationId);\n    setSelectedUserId(conversation.otherUser._id);\n  }, []);\n\n  // Handle starting a new conversation\n  const startNewConversation = useCallback(user => {\n    setSelectedUserId(user._id);\n    setSelectedConversationId(null);\n  }, []);\n\n  // Mark current conversation messages as read\n  useEffect(() => {\n    var _messagesData$data;\n    if (messagesData !== null && messagesData !== void 0 && (_messagesData$data = messagesData.data) !== null && _messagesData$data !== void 0 && _messagesData$data.messages) {\n      const unreadMessages = messagesData.data.messages.filter(msg => !msg.isRead && msg.sender._id !== selectedUserId);\n      unreadMessages.forEach(msg => {\n        markAsReadMutation.mutate(msg._id);\n      });\n    }\n  }, [messagesData, selectedUserId, markAsReadMutation]);\n  return {\n    // Data\n    conversations: (conversationsData === null || conversationsData === void 0 ? void 0 : (_conversationsData$da = conversationsData.data) === null || _conversationsData$da === void 0 ? void 0 : _conversationsData$da.conversations) || [],\n    messages: (messagesData === null || messagesData === void 0 ? void 0 : (_messagesData$data2 = messagesData.data) === null || _messagesData$data2 === void 0 ? void 0 : _messagesData$data2.messages) || [],\n    unreadCount: (unreadData === null || unreadData === void 0 ? void 0 : (_unreadData$data = unreadData.data) === null || _unreadData$data === void 0 ? void 0 : _unreadData$data.unreadCount) || 0,\n    // States\n    selectedConversationId,\n    selectedUserId,\n    conversationsLoading,\n    messagesLoading,\n    isSending: sendMessageMutation.isLoading,\n    // Actions\n    selectConversation,\n    startNewConversation,\n    sendMessage,\n    // Errors\n    conversationsError,\n    messagesError\n  };\n};\n_s(useMessaging, \"Bhn9mudbewWsU/3eJagZGK/CzUs=\", false, function () {\n  return [useQueryClient, useQuery, useQuery, useQuery, useMutation, useMutation];\n});","map":{"version":3,"names":["useState","useEffect","useCallback","useQuery","useMutation","useQueryClient","messagesAPI","toast","useMessaging","_s","_conversationsData$da","_messagesData$data2","_unreadData$data","selectedConversationId","setSelectedConversationId","selectedUserId","setSelectedUserId","queryClient","data","conversationsData","isLoading","conversationsLoading","error","conversationsError","getMessages","staleTime","refetchInterval","messagesData","messagesLoading","messagesError","getConversation","enabled","unreadData","getUnreadCount","sendMessageMutation","messageData","sendMessage","onSuccess","invalidateQueries","onError","console","markAsReadMutation","messageId","markAsRead","content","trim","mutate","recipient","selectConversation","conversation","conversationId","otherUser","_id","startNewConversation","user","_messagesData$data","messages","unreadMessages","filter","msg","isRead","sender","forEach","conversations","unreadCount","isSending"],"sources":["/Users/saksham/Desktop/Alumni_Connect/frontend/src/hooks/useMessaging.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { useQuery, useMutation, useQueryClient } from 'react-query';\nimport { messagesAPI } from '../services/api';\nimport toast from 'react-hot-toast';\n\nexport const useMessaging = () => {\n  const [selectedConversationId, setSelectedConversationId] = useState(null);\n  const [selectedUserId, setSelectedUserId] = useState(null);\n  const queryClient = useQueryClient();\n\n  // Fetch conversations\n  const {\n    data: conversationsData,\n    isLoading: conversationsLoading,\n    error: conversationsError,\n  } = useQuery('conversations', () => messagesAPI.getMessages(), {\n    staleTime: 30 * 1000, // 30 seconds\n    refetchInterval: 60 * 1000, // Refetch every minute\n  });\n\n  // Fetch messages for selected conversation\n  const {\n    data: messagesData,\n    isLoading: messagesLoading,\n    error: messagesError,\n  } = useQuery(\n    ['messages', selectedUserId],\n    () => messagesAPI.getConversation(selectedUserId),\n    {\n      enabled: !!selectedUserId,\n      staleTime: 10 * 1000, // 10 seconds\n    }\n  );\n\n  // Fetch unread count\n  const { data: unreadData } = useQuery(\n    'unreadCount',\n    () => messagesAPI.getUnreadCount(),\n    {\n      staleTime: 30 * 1000,\n      refetchInterval: 30 * 1000,\n    }\n  );\n\n  // Send message mutation\n  const sendMessageMutation = useMutation(\n    (messageData) => messagesAPI.sendMessage(messageData),\n    {\n      onSuccess: () => {\n        // Invalidate and refetch conversations and messages\n        queryClient.invalidateQueries('conversations');\n        queryClient.invalidateQueries(['messages', selectedUserId]);\n        queryClient.invalidateQueries('unreadCount');\n      },\n      onError: (error) => {\n        toast.error('Failed to send message');\n        console.error('Send message error:', error);\n      },\n    }\n  );\n\n  // Mark message as read mutation\n  const markAsReadMutation = useMutation(\n    (messageId) => messagesAPI.markAsRead(messageId),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('conversations');\n        queryClient.invalidateQueries('unreadCount');\n      },\n    }\n  );\n\n  // Handle sending a message\n  const sendMessage = useCallback(\n    (content) => {\n      if (!selectedUserId || !content.trim()) return;\n\n      sendMessageMutation.mutate({\n        recipient: selectedUserId,\n        content: content.trim(),\n      });\n    },\n    [selectedUserId, sendMessageMutation]\n  );\n\n  // Handle conversation selection\n  const selectConversation = useCallback((conversation) => {\n    setSelectedConversationId(conversation.conversationId);\n    setSelectedUserId(conversation.otherUser._id);\n  }, []);\n\n  // Handle starting a new conversation\n  const startNewConversation = useCallback((user) => {\n    setSelectedUserId(user._id);\n    setSelectedConversationId(null);\n  }, []);\n\n  // Mark current conversation messages as read\n  useEffect(() => {\n    if (messagesData?.data?.messages) {\n      const unreadMessages = messagesData.data.messages.filter(\n        (msg) => !msg.isRead && msg.sender._id !== selectedUserId\n      );\n      \n      unreadMessages.forEach((msg) => {\n        markAsReadMutation.mutate(msg._id);\n      });\n    }\n  }, [messagesData, selectedUserId, markAsReadMutation]);\n\n  return {\n    // Data\n    conversations: conversationsData?.data?.conversations || [],\n    messages: messagesData?.data?.messages || [],\n    unreadCount: unreadData?.data?.unreadCount || 0,\n    \n    // States\n    selectedConversationId,\n    selectedUserId,\n    conversationsLoading,\n    messagesLoading,\n    isSending: sendMessageMutation.isLoading,\n    \n    // Actions\n    selectConversation,\n    startNewConversation,\n    sendMessage,\n    \n    // Errors\n    conversationsError,\n    messagesError,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}